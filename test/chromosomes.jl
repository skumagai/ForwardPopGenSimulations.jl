"""
Tests for chromosomes and their associated methods.
"""
type SureMutation <: MutationFunction end
Base.call(x::SureMutation, i::Integer) = true
const suremut = SureMutation()

type NoMutation <: MutationFunction end
Base.call(x::NoMutation, i::Integer) = false
const nomut = NoMutation()

type SureRecombination <: RecombinationFunction end
Base.call(x::SureRecombination, i::Integer) = true
const surerec = SureRecombination()

type NoRecombination <: RecombinationFunction end
Base.call(x::NoRecombination, i::Integer) = false
const norec = NoRecombination()

facts("""
    There are three types of chromosomes.  All of them are subtypes of an
    abstract type called Chromosome. The three subtypes are SegmentedChromosome,
    ContinuousChromosome, and SegmentedContinousChromosome.

    In addition to constructors,
    """) do

    @facts issubtype(SegmentedChromosome, Chromosome)
    @facts issubtype(ContinousChromosome, Chromosome)
    @facts issubtype(SegmentedContinousChromosome, Chromosome)
end

facts("""
    The first subtype of Chromosome is SegmentedChromosome. A object of this
    type consists of a limited number of loci. A locus then stores a subtype
    of Gene. A SegmentedChromosome permits only inter-locus recombination,
    so it is suitable for simulating relatively short segment of chromosome
    intersparsed by much longer intervals.
    """) do

    contexts("""
        At the beginning of a simulation, chromosomes are initialized with
        desired number of loci.
        """) do

        chr = SegmentedChromosome(BaseGene{Int}, 2)
        @fact typeof(chr) => SegmentedChromosome{BaseGene}
        @fact length(chr) => 2
    end

    context("""
        Afterward, new chromosome is generated by meiosis. This process depends on
        the sex of offspring, mutation, and precombination processes.

        There are currently two cases. The first case is when a new chromosome is
        generated from a pair of parental chromosomes with or without recombination.
        This is the case for autosomal chromosomes and X-chromosome in female. The
        second case is when a new chromosome is generated from a single parental
        chromosome. This is for haploid in general, Y-chromosome, and mitochondrion.

        To increase flexibility mutation is not handled in this step.

        Here test cases under the first scenario are provided.
        """) do

            chr1 = SegmentedChromosome([BaseGene(0, 0), BaseGene(1, 1)])
            chr2 = SegmentedChromosome([BaseGene(3, 3), BaseGene(4, 4)])
            newchr = chromosome(chr1, chr2, norec)
            @fact newchar => anyof(chr1, chr2)

        end
    end
end

facts("""
    The second subtype of Chromosome is ContinousChromosome. A object of this
    type can have unlimited Genes. In fact, a gene is misnomer here. What genes
    represent is sites of mutation. Recombinations can occur between between
    any adjacent pairs of sites. Therefore, this type is suitable for the infinite-
    sites model. Internally, as the name of type suggests, sites are points on
    a real interval. Because of this design, it's impossible to preallocate fixed
    number of Genes at the beginning simulation. Likewise, it does not make sense
    to talk about the length of a chromosome.
    """) do

